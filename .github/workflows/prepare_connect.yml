on:
  push:

name: Prepare Connect Deployment

env:
  RENV_PATHS_ROOT: ~/.local/share/renv
  BRANCH_DEPLOY: bot/deploy
  PUSH_ON_BRANCH: deploy-examples
  PACKAGE_NAME: Appsilon/shiny.molstar

jobs:
  prepare-deployments:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      SHA: ${{ github.sha }}
      DEPLOY_PATHS: "inst/examples/AlphaFold.R;;inst/examples/FullPage.R"
      STATIC_INCLUDE: "inst/examples/www"
    steps:
      - name: Break paths to deploy
        shell: bash
        run: |
          # store multi-character delimiter
          delimiter=";;"

          # Define the string to split
          text="inst/examples/AlphaFold.R;;inst/examples/FullPage.R$delimiter"

          # Split the text based on the delimiter
          newarray=()
          while [[ $text ]]; do
           newarray+=( "${text%%"$delimiter"*}" )
           text=${text#*"$delimiter"}
          done
          echo "path_array=(${newarray[@]})" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Declare short SHA
        shell: bash
        run: >
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Setup git config
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"

      - name: Fetch branch if exists
        continue-on-error: true
        run: |
          git fetch origin $BRANCH_DEPLOY

      - name: Checkout branch and cleanup (setup orphan if no branch exists)
        run: |
          if [ `git rev-parse --verify origin/$BRANCH_DEPLOY 2>/dev/null` ]
          then
             git checkout origin/$BRANCH_DEPLOY -b $BRANCH_DEPLOY
          else
            git switch --orphan $BRANCH_DEPLOY
          fi

      - name: Checkout Apps
        shell: bash
        run: |
          newarray=${{ env.path_array}}

          # Print the words after the split
          for value in ${newarray[@]}
          do
            # Remove directories if they exist
            [ ! -d "$value" ] || git rm -rf $value

            # check out recent versions
            git checkout $SHA -- $value
            git checkout $SHA -- ${{ env.STATIC_INCLUDE}}

            dest=$(basename "$value")
            mkdir -p $dest

            ## move to correct directory (root)
            git mv $value $dest/app.R
            git mv ${{ env.STATIC_INCLUDE}} $dest/

            git add $dest
          done

      - name: Install R
        uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true

      - name: Setup system dependencies
        run: >
          sudo apt-get update && sudo apt-get install --yes
          libcurl4-openssl-dev

      - name: Install renv and box
        run: install.packages("renv")
        shell: Rscript {0}

      - name: Renv init
        shell: Rscript {0}
        run: |
          renv::init()
          renv::install("rsconnect")
          renv::snapshot()

      - name: Cache packages
        uses: actions/cache@v3
        with:
          path: ${{ env.RENV_PATHS_ROOT }}
          key: ${{ runner.os }}-renv-${{ hashFiles('**/renv.lock') }}
          restore-keys: |
            ${{ runner.os }}-renv-

      - name: Install package
        shell: Rscript {0}
        env:
          GITHUB_PAT: ${{ github.token }}
        run: |
          renv::install(paste0(Sys.getenv("PACKAGE_NAME"), "@", Sys.getenv("SHA")))

      - name: Write Manifests
        shell: bash
        run: |
          newarray=${{ env.path_array}}

          # Print the words after the split
          for value in ${newarray[@]}
          do

            dest=$(basename "$value")
            Rscript -e "rsconnect::writeManifest(appDir = '$dest')"

          done

      - name: Add to git tree
        shell: bash
        run: |
          newarray=${{ env.path_array}}

          # Print the words after the split
          for value in ${newarray[@]}
          do

            dest=$(basename "$value")
            git add $dest

          done

          git commit -m "Update deployed apps @${{ env.sha_short }}"

          git status
          git describe --all
          git log

      - name: Push to branch
        if: ${{ github.ref_name == env.PUSH_ON_BRANCH }}
        id: push-changes
        run: |
          git push origin $BRANCH_DEPLOY
